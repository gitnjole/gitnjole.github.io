<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://gitnjole.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://gitnjole.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-11T17:30:36+00:00</updated><id>https://gitnjole.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Production-ready fizzbuzz (Part 1)</title><link href="https://gitnjole.github.io/blog/2024/fizzbuzz/" rel="alternate" type="text/html" title="Production-ready fizzbuzz (Part 1)"/><published>2024-03-03T00:00:00+00:00</published><updated>2024-03-03T00:00:00+00:00</updated><id>https://gitnjole.github.io/blog/2024/fizzbuzz</id><content type="html" xml:base="https://gitnjole.github.io/blog/2024/fizzbuzz/"><![CDATA[<h1 id="embarking-on-the-production-journey">Embarking on the Production Journey</h1> <p>Imagine a problem set before you:</p> <p>Given an array <code class="language-plaintext highlighter-rouge">array</code>, your task is to return a string array called <code class="language-plaintext highlighter-rouge">answer</code> (1-indexed) where:</p> <ul> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is “FizzBuzz” if i is divisible by both 3 and 5.</li> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is “Fizz” if i is divisible by 3.</li> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is “Buzz” if i is divisible by 5.</li> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is the string representation of i if none of the above conditions are met.</li> </ul> <p>Consider these examples:</p> <p>Example 1:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: <span class="nv">$array</span> <span class="o">=</span> range<span class="o">(</span>1,3<span class="o">)</span>
Output: <span class="o">[</span><span class="s2">"1"</span>,<span class="s2">"2"</span>,<span class="s2">"Fizz"</span><span class="o">]</span>
</code></pre></div></div> <p>Example 2:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: <span class="nv">$array</span> <span class="o">=</span> range<span class="o">(</span>1,5<span class="o">)</span>
Output: <span class="o">[</span><span class="s2">"1"</span>,<span class="s2">"2"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"4"</span>,<span class="s2">"Buzz"</span><span class="o">]</span>
</code></pre></div></div> <p>Example 3:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: <span class="nv">$array</span> <span class="o">=</span> range<span class="o">(</span>1,15<span class="o">)</span>
Output: <span class="o">[</span><span class="s2">"1"</span>,<span class="s2">"2"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"4"</span>,<span class="s2">"Buzz"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"7"</span>,<span class="s2">"8"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"Buzz"</span>,<span class="s2">"11"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"13"</span>,<span class="s2">"14"</span>,<span class="s2">"FizzBuzz"</span><span class="o">]</span>
</code></pre></div></div> <p>Constraints:</p> <ul> <li>1 &lt;= n &lt;= 10^4</li> </ul> <p>It’s a fundamental programming challenge, testing basic division and loop comprehension. My mission? To craft a production-ready, highly scalable, and pattern-constrained FizzBuzz program using PHP.</p> <p>Throughout this journey, we’ll progressively enhance the solution, layering in increasingly sophisticated design patterns until we birth a truly refined, functional codebase. One poised for global deployment, destined to be embraced by billions as the definitive FizzBuzz solution.</p> <p>In Part 1 of this series, our focus lies on crafting a <strong>simple</strong>, functional FizzBuzz implementation.</p> <h1 id="unveiling-the-simple-solution">Unveiling the Simple Solution</h1> <p>Let’s revisit the problem statement: we’re tasked with processing an integer representing the range of numbers to be assessed. For each number, we check if it’s divisible by 3 or 5, appending “Fizz” or “Buzz” accordingly. If divisible by both, we output “FizzBuzz”. Otherwise, we pass the number unchanged.</p> <p>Here’s my implementation:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$array</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">15</span><span class="p">);</span>

<span class="nv">$answer</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$output</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Fizz'</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Buzz'</span><span class="p">;</span>

    <span class="k">return</span> <span class="nv">$output</span> <span class="o">?:</span> <span class="nv">$number</span><span class="p">;</span>
<span class="p">},</span> <span class="nv">$array</span><span class="p">);</span>

<span class="nb">print_r</span><span class="p">(</span><span class="nv">$answer</span><span class="p">);</span>
</code></pre></div></div> <p>This code yields the following output:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Array
<span class="o">(</span>
    <span class="o">[</span>0] <span class="o">=&gt;</span> 1
    <span class="o">[</span>1] <span class="o">=&gt;</span> 2
    <span class="o">[</span>2] <span class="o">=&gt;</span> Fizz
    <span class="o">[</span>3] <span class="o">=&gt;</span> 4
    <span class="o">[</span>4] <span class="o">=&gt;</span> Buzz
    <span class="o">[</span>5] <span class="o">=&gt;</span> Fizz
    <span class="o">[</span>6] <span class="o">=&gt;</span> 7
    <span class="o">[</span>7] <span class="o">=&gt;</span> 8
    <span class="o">[</span>8] <span class="o">=&gt;</span> Fizz
    <span class="o">[</span>9] <span class="o">=&gt;</span> Buzz
    <span class="o">[</span>10] <span class="o">=&gt;</span> 11
    <span class="o">[</span>11] <span class="o">=&gt;</span> Fizz
    <span class="o">[</span>12] <span class="o">=&gt;</span> 13
    <span class="o">[</span>13] <span class="o">=&gt;</span> 14
    <span class="o">[</span>14] <span class="o">=&gt;</span> FizzBuzz
<span class="o">)</span>

</code></pre></div></div> <p>I’ve used the built-in <code class="language-plaintext highlighter-rouge">array_map()</code> function which iterates over each element of the <code class="language-plaintext highlighter-rouge">$array</code> array, applying our lambda function to each element. The result is an array containing the modified elements according to the FizzBuzz logic.</p> <p>This solution works very well. You might’ve noticed that I haven’t included the edge case of passing in a <code class="language-plaintext highlighter-rouge">0</code>. Our constraint states that the numbers inside the array have to be positive integers up to 10,000 so that is what we will stick to throughout this blog, but in case you were wondering we could easily fix this problem by adding the following statement:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$array</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>

<span class="nv">$answer</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$output</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>

    <span class="cd">/**
     * This if statement checks if
     * our number is that troublesome
     * zero.
    */</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$number</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Fizz'</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Buzz'</span><span class="p">;</span>

    <span class="k">return</span> <span class="nv">$output</span> <span class="o">?:</span> <span class="nv">$number</span><span class="p">;</span>
<span class="p">},</span> <span class="nv">$array</span><span class="p">);</span>

<span class="nb">print_r</span><span class="p">(</span><span class="nv">$answer</span><span class="p">);</span>
</code></pre></div></div> <p>So far, so good. The code functions as intended, boasting optimal efficiency with a big O notation of O(n). Yet, our management craves more: they seek complexity, <em>scalability</em>, and <strong>modernity</strong>.</p> <p>And that’s precisely what you’ll find in this blog. An evolved FizzBuzz apparatus. A fizzbutus<sup>TM</sup>, if you will. In the upcoming chapters, we’ll transform our solution into an object-oriented paradigm, a beacon of modern ingenuity and programmer resourcefulness, by integrating our first design pattern: the <strong>Flyweight</strong>.</p> <p>Stay tuned!</p>]]></content><author><name></name></author><category term="fizzbuzz"/><category term="php"/><category term="design"/><category term="pattern"/><summary type="html"><![CDATA[A journey through the 9 circles of design patterns]]></summary></entry><entry><title type="html">Production-ready fizzbuzz (Part 1.5)</title><link href="https://gitnjole.github.io/blog/2024/fizzbuzz-continued/" rel="alternate" type="text/html" title="Production-ready fizzbuzz (Part 1.5)"/><published>2024-03-03T00:00:00+00:00</published><updated>2024-03-03T00:00:00+00:00</updated><id>https://gitnjole.github.io/blog/2024/fizzbuzz-continued</id><content type="html" xml:base="https://gitnjole.github.io/blog/2024/fizzbuzz-continued/"><![CDATA[<h1 id="refactor-refactor-refactor">Refactor, refactor, refactor</h1> <p>As our quest for the ultimate FizzBuzz solution continues, we find ourselves delving deeper into the realms of complexity, scalability, and—dare I say it—object-oriented design.</p> <p>In the previous chapter, we witnessed the birth of a simple yet functional FizzBuzz implementation. But alas, management was not appeased. They yearned for more. And so, with a deep breath and a hint of trepidation, we embark on Chapter 1.5 of our odyssey: the transition to object-oriented perfection.</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">FizzBuzz</span> <span class="p">{</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span>
        <span class="k">private</span> <span class="kt">array</span> <span class="nv">$numbers</span>
    <span class="p">)</span> <span class="p">{}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">getAnswer</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$num</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$output</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$num</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Fizz'</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$num</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Buzz'</span><span class="p">;</span>

            <span class="k">return</span> <span class="nv">$output</span> <span class="o">?:</span> <span class="nv">$num</span><span class="p">;</span>
        <span class="p">},</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">numbers</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$numbers</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">30</span><span class="p">);</span>
<span class="nv">$answer</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nc">FizzBuzz</span><span class="p">(</span><span class="nv">$numbers</span><span class="p">))</span><span class="o">-&gt;</span><span class="nf">getAnswer</span><span class="p">();</span>

<span class="nb">print_r</span><span class="p">(</span><span class="nv">$answer</span><span class="p">);</span>
</code></pre></div></div> <p>Yes, the culmination of our efforts, encapsulated within the confines of a class named FizzBuzz. No longer shall our code languish in the squalor of procedural obscurity; it shall ascend to the lofty heights of object-oriented elegance.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Array
<span class="o">(</span>
    <span class="o">[</span>0] <span class="o">=&gt;</span> 1
    <span class="o">[</span>1] <span class="o">=&gt;</span> 2
    <span class="o">[</span>2] <span class="o">=&gt;</span> Fizz
<span class="o">)</span>
</code></pre></div></div> <p>The output remains the same.</p> <p>Gone are the days of loose arrays and function calls. Instead, we embrace the order and structure afforded by class-based instantiation. Now, behold the evolution of our code: we define our <code class="language-plaintext highlighter-rouge">array</code>, instantiate the <code class="language-plaintext highlighter-rouge">FizzBuzz</code> class with it, and elegantly summon the <code class="language-plaintext highlighter-rouge">getAnswer()</code> method in a single line. The birth of <code class="language-plaintext highlighter-rouge">(new FizzBuzz($numbers))</code> streamlines our instantiation process, sparing us from the verbosity of traditional class instantiation:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$fizzBuzz</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FizzBuzz</span><span class="p">(</span><span class="nv">$numbers</span><span class="p">);</span>
<span class="nv">$fizzBuzz</span><span class="o">-&gt;</span><span class="nf">getAnswer</span><span class="p">();</span>
</code></pre></div></div> <p>Out humble constructor uses property promotion which prefixes the constructor parameters with <code class="language-plaintext highlighter-rouge">private</code> which PHP will take as the normal</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="kt">array</span> <span class="nv">$numbers</span><span class="p">;</span>

<span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">numbers</span> <span class="o">=</span> <span class="nv">$numbers</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>Regarding our <code class="language-plaintext highlighter-rouge">getAnswer</code> method; Yes, the functionality is exactly the same. I strive for ingenuity here and that is what you will get. Speaking of ingenuity, here is what the spacecraft on mars looks like:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gifs/heli_dark-480.webp 480w,/assets/gifs/heli_dark-800.webp 800w,/assets/gifs/heli_dark-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gifs/heli_dark.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Believe it or not, this little robot actually used my FizzBuzz program to determine the wind speeds on Mars. Unfortunately, on January 6th, 2024, the spacecraft met it’s untimely end as it crashed into the red sands of Mars. But from its flight emerges a revelation: the upcoming pattern—flight itself!</p> <p>Stay tuned for Chapter 2, where we shall unveil our first design pattern: the Flyweight.</p>]]></content><author><name></name></author><category term="fizzbuzz"/><category term="php"/><category term="design"/><category term="pattern"/><summary type="html"><![CDATA[Assembling our God]]></summary></entry></feed>