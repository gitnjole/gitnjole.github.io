<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://gitnjole.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://gitnjole.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-05T22:34:11+00:00</updated><id>https://gitnjole.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Production-ready fizzbuzz (Part 1)</title><link href="https://gitnjole.github.io/blog/2024/fizzbuzz/" rel="alternate" type="text/html" title="Production-ready fizzbuzz (Part 1)"/><published>2024-03-03T00:00:00+00:00</published><updated>2024-03-03T00:00:00+00:00</updated><id>https://gitnjole.github.io/blog/2024/fizzbuzz</id><content type="html" xml:base="https://gitnjole.github.io/blog/2024/fizzbuzz/"><![CDATA[<h1 id="embarking-on-the-production-journey">Embarking on the Production Journey</h1> <p>Imagine a problem set before you:</p> <p>Given an array <code class="language-plaintext highlighter-rouge">array</code>, your task is to return a string array called <code class="language-plaintext highlighter-rouge">answer</code> (1-indexed) where:</p> <ul> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is “FizzBuzz” if i is divisible by both 3 and 5.</li> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is “Fizz” if i is divisible by 3.</li> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is “Buzz” if i is divisible by 5.</li> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is the string representation of i if none of the above conditions are met.</li> </ul> <p>Consider these examples:</p> <p>Example 1:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: <span class="nv">$array</span> <span class="o">=</span> range<span class="o">(</span>1,3<span class="o">)</span>
Output: <span class="o">[</span><span class="s2">"1"</span>,<span class="s2">"2"</span>,<span class="s2">"Fizz"</span><span class="o">]</span>
</code></pre></div></div> <p>Example 2:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: <span class="nv">$array</span> <span class="o">=</span> range<span class="o">(</span>1,5<span class="o">)</span>
Output: <span class="o">[</span><span class="s2">"1"</span>,<span class="s2">"2"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"4"</span>,<span class="s2">"Buzz"</span><span class="o">]</span>
</code></pre></div></div> <p>Example 3:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: <span class="nv">$array</span> <span class="o">=</span> range<span class="o">(</span>1,15<span class="o">)</span>
Output: <span class="o">[</span><span class="s2">"1"</span>,<span class="s2">"2"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"4"</span>,<span class="s2">"Buzz"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"7"</span>,<span class="s2">"8"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"Buzz"</span>,<span class="s2">"11"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"13"</span>,<span class="s2">"14"</span>,<span class="s2">"FizzBuzz"</span><span class="o">]</span>
</code></pre></div></div> <p>It’s a fundamental programming challenge, testing basic division and loop comprehension. My mission? To craft a production-ready, highly scalable, and pattern-constrained FizzBuzz program using PHP.</p> <p>Throughout this journey, we’ll progressively enhance the solution, layering in increasingly sophisticated design patterns until we birth a truly refined, functional codebase. One poised for global deployment, destined to be embraced by billions as the definitive FizzBuzz solution.</p> <p>In Part 1 of this series, our focus lies on crafting a <strong>simple</strong>, functional FizzBuzz implementation.</p> <h1 id="unveiling-the-simple-solution">Unveiling the Simple Solution</h1> <p>Let’s revisit the problem statement: we’re tasked with processing an integer representing the range of numbers to be assessed. For each number, we check if it’s divisible by 3 or 5, appending “Fizz” or “Buzz” accordingly. If divisible by both, we output “FizzBuzz”. Otherwise, we pass the number unchanged.</p> <p>Here’s my implementation:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$nums</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>

<span class="nv">$result</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$num</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$output</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$num</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Fizz'</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$num</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Buzz'</span><span class="p">;</span>

    <span class="k">return</span> <span class="nv">$output</span> <span class="o">?:</span> <span class="nv">$num</span><span class="p">;</span>
<span class="p">},</span> <span class="nv">$nums</span><span class="p">);</span>

<span class="nb">print_r</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</code></pre></div></div> <p>This code yields the following output:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Array
<span class="o">(</span>
    <span class="o">[</span>0] <span class="o">=&gt;</span> 1
    <span class="o">[</span>1] <span class="o">=&gt;</span> 2
    <span class="o">[</span>2] <span class="o">=&gt;</span> Fizz
<span class="o">)</span>
</code></pre></div></div> <p>So far, so good. The code functions as intended, boasting optimal efficiency with a big O notation of O(n). Yet, our leadership craves more: they seek complexity, <em>scalability</em>, and <strong>modernity</strong>.</p> <p>And that’s precisely what you’ll find in this blog. An evolved FizzBuzz apparatus. In the upcoming chapters, we’ll transform our solution into an object-oriented paradigm, a beacon of modern ingenuity and programmer resourcefulness, by integrating our first design pattern: the <strong>Flyweight</strong>.</p> <p>Stay tuned!</p>]]></content><author><name></name></author><category term="fizzbuzz"/><category term="php"/><category term="design"/><category term="pattern"/><summary type="html"><![CDATA[A journey through the 9 circles of design patterns]]></summary></entry><entry><title type="html">Production-ready fizzbuzz (Part 2)</title><link href="https://gitnjole.github.io/blog/2024/flyweight/" rel="alternate" type="text/html" title="Production-ready fizzbuzz (Part 2)"/><published>2024-03-03T00:00:00+00:00</published><updated>2024-03-03T00:00:00+00:00</updated><id>https://gitnjole.github.io/blog/2024/flyweight</id><content type="html" xml:base="https://gitnjole.github.io/blog/2024/flyweight/"><![CDATA[<h1 id="refactor-refactor-refactor">Refactor, refactor, refactor</h1> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">FizzBuzz</span> <span class="p">{</span>
    <span class="k">private</span> <span class="nv">$nums</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="nv">$nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">nums</span> <span class="o">=</span> <span class="nv">$nums</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">getResult</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$num</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$output</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nv">$num</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Fizz'</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$num</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Buzz'</span><span class="p">;</span>

            <span class="k">return</span> <span class="nv">$output</span> <span class="o">?:</span> <span class="nv">$num</span><span class="p">;</span>
        <span class="p">},</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">nums</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$nums</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="nv">$fizzBuzz</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FizzBuzz</span><span class="p">(</span><span class="nv">$nums</span><span class="p">);</span>
<span class="nv">$result</span> <span class="o">=</span> <span class="nv">$fizzBuzz</span><span class="o">-&gt;</span><span class="nf">getResult</span><span class="p">();</span>

<span class="nb">print_r</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="fizzbuzz"/><category term="php"/><category term="design"/><category term="pattern"/><summary type="html"><![CDATA[Our first circle of hell, the innocent Flyweight]]></summary></entry></feed>