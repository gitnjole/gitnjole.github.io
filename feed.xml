<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://gitnjole.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://gitnjole.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-16T15:20:56+00:00</updated><id>https://gitnjole.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Creating an Editable Card Input UI</title><link href="https://gitnjole.github.io/blog/2024/js-learning/" rel="alternate" type="text/html" title="Creating an Editable Card Input UI"/><published>2024-03-28T00:00:00+00:00</published><updated>2024-03-28T00:00:00+00:00</updated><id>https://gitnjole.github.io/blog/2024/js-learning</id><content type="html" xml:base="https://gitnjole.github.io/blog/2024/js-learning/"><![CDATA[<h1 id="initial-design">Initial design</h1> <p>While working on my project <a href="https://github.com/gitnjole/e-charge-tracker">e-charge-tracker</a> I wanted to have an animated charging card display where the user would be able to enter the card information before checking its status. I came across a Tailwind component for a simple Payment Card Form created by <a href="https://davidschinteie.hashnode.dev/tailwind-css-creating-a-simple-and-modern-payment-card-form">David Schinteie</a>.</p> <p>Here is his design of the interactable card:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gifs/payment-form-480.webp 480w,/assets/gifs/payment-form-800.webp 800w,/assets/gifs/payment-form-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gifs/payment-form.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>It looks nice, but the goal was for the user to interact with the card directly and input the details into the image, as opposed to using seperate input fields. In the original version, any click on the card would flip the card over. This was handled by the <code class="language-plaintext highlighter-rouge">toggleBackCard()</code> function written in JavaScript:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">toggleBackCard</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">cardEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">creditCard</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">cardEl</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">contains</span><span class="p">(</span><span class="dl">"</span><span class="s2">seeBack</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">cardEl</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">seeBack</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">cardEl</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">seeBack</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">showBackCard</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">cardEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">creditCard</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">cardEl</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">contains</span><span class="p">(</span><span class="dl">"</span><span class="s2">seeBack</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">cardEl</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">seeBack</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="kd">const</span> <span class="nx">hideBackCard</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">cardEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">creditCard</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">cardEl</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">contains</span><span class="p">(</span><span class="dl">"</span><span class="s2">seeBack</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">cardEl</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">seeBack</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <h2 id="creating-input-fields">Creating input fields</h2> <p>First, instead of projecting user entered values onto the card, I added input fields directly onto the card element. That created a problem for me. In the original code, if the user clicked anywhere on the card, it would flip. That function clearly bothered users as they wouldn’t be able to insert their data as the card would constatnly flip on them.</p> <h2 id="conditional-flipping">Conditional flipping</h2> <p>Next, I needed to make the <code class="language-plaintext highlighter-rouge">toggleBackCard</code> function smarter by implementing a check to see if the click originated from the input field</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">toggleBackCard</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">//Stop execution if clicked inside an input field</span>
<span class="k">if </span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">tagName</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">INPUT</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">cardEl</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">creditCard</span><span class="dl">"</span><span class="p">);</span>
<span class="k">if </span><span class="p">(</span><span class="nx">cardEl</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">contains</span><span class="p">(</span><span class="dl">"</span><span class="s2">seeBack</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">cardEl</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">seeBack</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">cardEl</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">seeBack</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div> <p>I removed the <code class="language-plaintext highlighter-rouge">onclick</code> attribute entirely from the card’s HTML element. Then, I added targeted event listeners:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">cardNumber</span><span class="dl">"</span><span class="p">).</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nf">stopPropagation</span><span class="p">();</span>
<span class="p">});</span>

<span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">ccvNumber</span><span class="dl">"</span><span class="p">).</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nf">stopPropagation</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">event.stopPropagation()</code> is key to prevent click events on the input fields from bubbling up and triggering the flip.</p> <h1 id="the-result">The result</h1> <p>With these changes, the card animation behaves perfectly! The card flips when a user clicks on a non-input area and the user can freely enter their details without unexpected flips and data loss.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/gifs/payment-mine-480.webp 480w,/assets/gifs/payment-mine-800.webp 800w,/assets/gifs/payment-mine-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/gifs/payment-mine.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure>]]></content><author><name></name></author><category term="js-learning"/><category term="js"/><summary type="html"><![CDATA[My solution to implementing an input inside a moving a card element]]></summary></entry><entry><title type="html">Production-ready fizzbuzz (Part 1)</title><link href="https://gitnjole.github.io/blog/2024/fizzbuzz/" rel="alternate" type="text/html" title="Production-ready fizzbuzz (Part 1)"/><published>2024-03-03T00:00:00+00:00</published><updated>2024-03-03T00:00:00+00:00</updated><id>https://gitnjole.github.io/blog/2024/fizzbuzz</id><content type="html" xml:base="https://gitnjole.github.io/blog/2024/fizzbuzz/"><![CDATA[<h1 id="embarking-on-the-production-journey">Embarking on the Production Journey</h1> <p>Imagine a problem set before you:</p> <p>Given an array <code class="language-plaintext highlighter-rouge">array</code>, your task is to return a string array called <code class="language-plaintext highlighter-rouge">answer</code> (1-indexed) where:</p> <ul> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is “FizzBuzz” if i is divisible by both 3 and 5.</li> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is “Fizz” if i is divisible by 3.</li> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is “Buzz” if i is divisible by 5.</li> <li><code class="language-plaintext highlighter-rouge">answer[i]</code> is the string representation of i if none of the above conditions are met.</li> </ul> <p>Consider these examples:</p> <p>Example 1:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: <span class="nv">$array</span> <span class="o">=</span> range<span class="o">(</span>1,3<span class="o">)</span>
Output: <span class="o">[</span><span class="s2">"1"</span>,<span class="s2">"2"</span>,<span class="s2">"Fizz"</span><span class="o">]</span>
</code></pre></div></div> <p>Example 2:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: <span class="nv">$array</span> <span class="o">=</span> range<span class="o">(</span>1,5<span class="o">)</span>
Output: <span class="o">[</span><span class="s2">"1"</span>,<span class="s2">"2"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"4"</span>,<span class="s2">"Buzz"</span><span class="o">]</span>
</code></pre></div></div> <p>Example 3:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: <span class="nv">$array</span> <span class="o">=</span> range<span class="o">(</span>1,15<span class="o">)</span>
Output: <span class="o">[</span><span class="s2">"1"</span>,<span class="s2">"2"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"4"</span>,<span class="s2">"Buzz"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"7"</span>,<span class="s2">"8"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"Buzz"</span>,<span class="s2">"11"</span>,<span class="s2">"Fizz"</span>,<span class="s2">"13"</span>,<span class="s2">"14"</span>,<span class="s2">"FizzBuzz"</span><span class="o">]</span>
</code></pre></div></div> <p>Constraints:</p> <ul> <li>1 &lt;= n &lt;= 10^4</li> </ul> <p>It’s a fundamental programming challenge, testing basic division and loop comprehension. My mission? To craft a production-ready, highly scalable, and pattern-constrained FizzBuzz program using PHP.</p> <p>Throughout this journey, we’ll progressively enhance the solution, layering in increasingly sophisticated design patterns until we birth a truly refined, functional codebase. One poised for global deployment, destined to be embraced by billions as the definitive FizzBuzz solution.</p> <p>In Part 1 of this series, our focus lies on crafting a <strong>simple</strong>, functional FizzBuzz implementation.</p> <h1 id="unveiling-the-simple-solution">Unveiling the Simple Solution</h1> <p>Let’s revisit the problem statement: we’re tasked with processing an integer representing the range of numbers to be assessed. For each number, we check if it’s divisible by 3 or 5, appending “Fizz” or “Buzz” accordingly. If divisible by both, we output “FizzBuzz”. Otherwise, we pass the number unchanged.</p> <p>Here’s my implementation:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$array</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">15</span><span class="p">);</span>

<span class="nv">$answer</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$output</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Fizz'</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Buzz'</span><span class="p">;</span>

    <span class="k">return</span> <span class="nv">$output</span> <span class="o">?:</span> <span class="nv">$number</span><span class="p">;</span>
<span class="p">},</span> <span class="nv">$array</span><span class="p">);</span>

<span class="nb">print_r</span><span class="p">(</span><span class="nv">$answer</span><span class="p">);</span>
</code></pre></div></div> <p>This code yields the following output:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Array
<span class="o">(</span>
    <span class="o">[</span>0] <span class="o">=&gt;</span> 1
    <span class="o">[</span>1] <span class="o">=&gt;</span> 2
    <span class="o">[</span>2] <span class="o">=&gt;</span> Fizz
    <span class="o">[</span>3] <span class="o">=&gt;</span> 4
    <span class="o">[</span>4] <span class="o">=&gt;</span> Buzz
    <span class="o">[</span>5] <span class="o">=&gt;</span> Fizz
    <span class="o">[</span>6] <span class="o">=&gt;</span> 7
    <span class="o">[</span>7] <span class="o">=&gt;</span> 8
    <span class="o">[</span>8] <span class="o">=&gt;</span> Fizz
    <span class="o">[</span>9] <span class="o">=&gt;</span> Buzz
    <span class="o">[</span>10] <span class="o">=&gt;</span> 11
    <span class="o">[</span>11] <span class="o">=&gt;</span> Fizz
    <span class="o">[</span>12] <span class="o">=&gt;</span> 13
    <span class="o">[</span>13] <span class="o">=&gt;</span> 14
    <span class="o">[</span>14] <span class="o">=&gt;</span> FizzBuzz
<span class="o">)</span>

</code></pre></div></div> <p>I’ve used the built-in <code class="language-plaintext highlighter-rouge">array_map()</code> function which iterates over each element of the <code class="language-plaintext highlighter-rouge">$array</code> array, applying our lambda function to each element. The result is an array containing the modified elements according to the FizzBuzz logic.</p> <p>This solution works very well. You might’ve noticed that I haven’t included the edge case of passing in a <code class="language-plaintext highlighter-rouge">0</code>. Our constraint states that the numbers inside the array have to be positive integers up to 10,000 so that is what we will stick to throughout this blog, but in case you were wondering we could easily fix this problem by adding the following statement:</p> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$array</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>

<span class="nv">$answer</span> <span class="o">=</span> <span class="nb">array_map</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$output</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>

    <span class="cd">/**
     * This if statement checks if
     * our number is that troublesome
     * zero.
    */</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$number</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Fizz'</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">$output</span> <span class="mf">.</span><span class="o">=</span> <span class="s1">'Buzz'</span><span class="p">;</span>

    <span class="k">return</span> <span class="nv">$output</span> <span class="o">?:</span> <span class="nv">$number</span><span class="p">;</span>
<span class="p">},</span> <span class="nv">$array</span><span class="p">);</span>

<span class="nb">print_r</span><span class="p">(</span><span class="nv">$answer</span><span class="p">);</span>
</code></pre></div></div> <p>So far, so good. The code functions as intended, boasting optimal efficiency with a big O notation of O(n). Yet, our management craves more: they seek complexity, <em>scalability</em>, and <strong>modernity</strong>.</p> <p>And that’s precisely what you’ll find in this blog. An evolved FizzBuzz apparatus. In the upcoming chapters, I’ll transform my solution into an object-oriented paradigm, a beacon of modern ingenuity and programmer resourcefulness, by integrating the first design pattern: the <strong>Flyweight</strong>.</p>]]></content><author><name></name></author><category term="fizzbuzz"/><category term="php"/><category term="design"/><category term="pattern"/><summary type="html"><![CDATA[A journey through the 9 circles of design patterns]]></summary></entry></feed>